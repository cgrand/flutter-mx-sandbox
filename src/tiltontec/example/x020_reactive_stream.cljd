(ns tiltontec.example.x020-reactive-stream
  (:require
    ["dart:async" :as async]
    [clojure.string :as str]
    [tiltontec.cell.core :refer [cF cF+ cF_ cI]]
    [tiltontec.cell.observer :refer [fn-obs]]
    [tiltontec.model.core :refer [mget mset! mswap! fm*] :as md]
    [tiltontec.flutter-mx.core :refer [as-dart-callback] :as fx]
    ["package:flutter/widgets.dart" :as w]
    ["package:flutter/material.dart" :as m]
    ["package:flutter/painting.dart" :as p]
    [tiltontec.util.base :refer [dprn dp dpx]]
    [tiltontec.cell.base :refer [cinfo minfo] :as cty]
    [tiltontec.cell.integrity :refer [with-integrity]]))

(defn make-app []
  (fx/material-app
    {:title "Flutter/MX Stream Demo"
     :theme (m/ThemeData .primarySwatch m.Colors/blue)}
    (fx/scaffold
      {:appBar (fx/app-bar
                 {:title (m/Text "Talking to Myself")})
       :floatingActionButton
       (cF (fx/floating-action-button
             {:onPressed (as-dart-callback []
                           (.add (.-sink ^#/(async/StreamController String) (mget me :message))
                             (rand-nth
                               (str/split  "four score and seven years ago our forefathers brought forth"
                                 #" "))))
              :tooltip   "Send message"}
             {
              :name :msg-send
              :message (new #/(async/StreamController String))
              }
             (m/Icon m.Icons/chat .color m.Colors/black)))}
      (fx/center
        (fx/column
          {:mainAxisAlignment m.MainAxisAlignment/center}
          (fx/text {:style (p/TextStyle .color m.Colors/black
                             .fontSize 36.0)}
            "Message received:")
          (fx/text!
            {:style (fx/in-my-context [me ctx]
                      (.-headline3 (.-textTheme (m.Theme/of ctx))))}
            {:name  :z-counter
             :msg-source (cF+ [;; todo validate options, ie :watch, not :obs
                               :watch (fn [_ me ^#/(async/StreamController String) new-source old-source _]
                                        ;; todo when old-source, unlisten it
                                        (.listen (.-stream ^#/(async/StreamController String) new-source)
                                          (fn [^String msg]
                                            (with-integrity [:change :msg-rcvd]
                                              (mset! me :message-rcvd msg)))))]
                           (mget (fm* :msg-send) :message))
             :message-rcvd (cI "<none>")}
            (mget me :message-rcvd)))))))